   0  $accept : expr $end

   1  expr : ID arr_index
   2       | ID OPER_PP
   3       | ID OPER_SS
   4       | '-' expr
   5       | expr '*' expr
   6       | expr '/' expr
   7       | expr '%' expr
   8       | expr '+' expr
   9       | expr '-' expr
  10       | expr OPER_CMP expr
  11       | '!' expr
  12       | expr OPER_AA expr
  13       | expr OPER_OO expr
  14       | '(' expr ')'
  15       | ID
  16       | val

  17  val : SCI
  18      | INT
  19      | DOUBLE
  20      | CHAR
  21      | STR
  22      | KEY_NULL
  23      | KEY_TRUE
  24      | KEY_FALSE

  25  arr_index : '[' expr ']'
  26            | '[' expr ']' arr_index

state 0
	$accept : . expr $end  (0)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 13
	val  goto 14


state 1
	val : KEY_NULL .  (22)

	.  reduce 22


state 2
	val : KEY_TRUE .  (23)

	.  reduce 23


state 3
	val : KEY_FALSE .  (24)

	.  reduce 24


state 4
	expr : ID . arr_index  (1)
	expr : ID . OPER_PP  (2)
	expr : ID . OPER_SS  (3)
	expr : ID .  (15)

	OPER_PP  shift 15
	OPER_SS  shift 16
	'['  shift 17
	$end  reduce 15
	OPER_AA  reduce 15
	OPER_OO  reduce 15
	OPER_CMP  reduce 15
	'+'  reduce 15
	'-'  reduce 15
	'*'  reduce 15
	'/'  reduce 15
	'%'  reduce 15
	']'  reduce 15
	')'  reduce 15

	arr_index  goto 18


state 5
	val : SCI .  (17)

	.  reduce 17


state 6
	val : INT .  (18)

	.  reduce 18


state 7
	val : DOUBLE .  (19)

	.  reduce 19


state 8
	val : CHAR .  (20)

	.  reduce 20


state 9
	val : STR .  (21)

	.  reduce 21


state 10
	expr : '!' . expr  (11)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 19
	val  goto 14


state 11
	expr : '-' . expr  (4)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 20
	val  goto 14


state 12
	expr : '(' . expr ')'  (14)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 21
	val  goto 14


state 13
	$accept : expr . $end  (0)
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)

	$end  accept
	OPER_AA  shift 22
	OPER_OO  shift 23
	OPER_CMP  shift 24
	'+'  shift 25
	'-'  shift 26
	'*'  shift 27
	'/'  shift 28
	'%'  shift 29
	.  error


state 14
	expr : val .  (16)

	.  reduce 16


state 15
	expr : ID OPER_PP .  (2)

	.  reduce 2


state 16
	expr : ID OPER_SS .  (3)

	.  reduce 3


state 17
	arr_index : '[' . expr ']'  (25)
	arr_index : '[' . expr ']' arr_index  (26)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 30
	val  goto 14


state 18
	expr : ID arr_index .  (1)

	.  reduce 1


state 19
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : '!' expr .  (11)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)

	OPER_CMP  shift 24
	'+'  shift 25
	'-'  shift 26
	'*'  shift 27
	'/'  shift 28
	'%'  shift 29
	$end  reduce 11
	OPER_AA  reduce 11
	OPER_OO  reduce 11
	']'  reduce 11
	')'  reduce 11


state 20
	expr : '-' expr .  (4)
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)

	.  reduce 4


state 21
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)
	expr : '(' expr . ')'  (14)

	OPER_AA  shift 22
	OPER_OO  shift 23
	OPER_CMP  shift 24
	'+'  shift 25
	'-'  shift 26
	'*'  shift 27
	'/'  shift 28
	'%'  shift 29
	')'  shift 31
	.  error


state 22
	expr : expr OPER_AA . expr  (12)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 32
	val  goto 14


state 23
	expr : expr OPER_OO . expr  (13)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 33
	val  goto 14


state 24
	expr : expr OPER_CMP . expr  (10)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 34
	val  goto 14


state 25
	expr : expr '+' . expr  (8)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 35
	val  goto 14


state 26
	expr : expr '-' . expr  (9)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 36
	val  goto 14


state 27
	expr : expr '*' . expr  (5)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 37
	val  goto 14


state 28
	expr : expr '/' . expr  (6)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 38
	val  goto 14


state 29
	expr : expr '%' . expr  (7)

	KEY_NULL  shift 1
	KEY_TRUE  shift 2
	KEY_FALSE  shift 3
	ID  shift 4
	SCI  shift 5
	INT  shift 6
	DOUBLE  shift 7
	CHAR  shift 8
	STR  shift 9
	'!'  shift 10
	'-'  shift 11
	'('  shift 12
	.  error

	expr  goto 39
	val  goto 14


state 30
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)
	arr_index : '[' expr . ']'  (25)
	arr_index : '[' expr . ']' arr_index  (26)

	OPER_AA  shift 22
	OPER_OO  shift 23
	OPER_CMP  shift 24
	'+'  shift 25
	'-'  shift 26
	'*'  shift 27
	'/'  shift 28
	'%'  shift 29
	']'  shift 40
	.  error


state 31
	expr : '(' expr ')' .  (14)

	.  reduce 14


state 32
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr OPER_AA expr .  (12)
	expr : expr . OPER_OO expr  (13)

	OPER_CMP  shift 24
	'+'  shift 25
	'-'  shift 26
	'*'  shift 27
	'/'  shift 28
	'%'  shift 29
	$end  reduce 12
	OPER_AA  reduce 12
	OPER_OO  reduce 12
	']'  reduce 12
	')'  reduce 12


state 33
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)
	expr : expr OPER_OO expr .  (13)

	OPER_AA  shift 22
	OPER_CMP  shift 24
	'+'  shift 25
	'-'  shift 26
	'*'  shift 27
	'/'  shift 28
	'%'  shift 29
	$end  reduce 13
	OPER_OO  reduce 13
	']'  reduce 13
	')'  reduce 13


state 34
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr OPER_CMP expr .  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)

	'+'  shift 25
	'-'  shift 26
	'*'  shift 27
	'/'  shift 28
	'%'  shift 29
	$end  reduce 10
	OPER_AA  reduce 10
	OPER_OO  reduce 10
	OPER_CMP  reduce 10
	']'  reduce 10
	')'  reduce 10


state 35
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr '+' expr .  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)

	'*'  shift 27
	'/'  shift 28
	'%'  shift 29
	$end  reduce 8
	OPER_AA  reduce 8
	OPER_OO  reduce 8
	OPER_CMP  reduce 8
	'+'  reduce 8
	'-'  reduce 8
	']'  reduce 8
	')'  reduce 8


state 36
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr '-' expr .  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)

	'*'  shift 27
	'/'  shift 28
	'%'  shift 29
	$end  reduce 9
	OPER_AA  reduce 9
	OPER_OO  reduce 9
	OPER_CMP  reduce 9
	'+'  reduce 9
	'-'  reduce 9
	']'  reduce 9
	')'  reduce 9


state 37
	expr : expr . '*' expr  (5)
	expr : expr '*' expr .  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)

	.  reduce 5


state 38
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr '/' expr .  (6)
	expr : expr . '%' expr  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)

	.  reduce 6


state 39
	expr : expr . '*' expr  (5)
	expr : expr . '/' expr  (6)
	expr : expr . '%' expr  (7)
	expr : expr '%' expr .  (7)
	expr : expr . '+' expr  (8)
	expr : expr . '-' expr  (9)
	expr : expr . OPER_CMP expr  (10)
	expr : expr . OPER_AA expr  (12)
	expr : expr . OPER_OO expr  (13)

	.  reduce 7


state 40
	arr_index : '[' expr ']' .  (25)
	arr_index : '[' expr ']' . arr_index  (26)

	'['  shift 17
	$end  reduce 25
	OPER_AA  reduce 25
	OPER_OO  reduce 25
	OPER_CMP  reduce 25
	'+'  reduce 25
	'-'  reduce 25
	'*'  reduce 25
	'/'  reduce 25
	'%'  reduce 25
	']'  reduce 25
	')'  reduce 25

	arr_index  goto 41


state 41
	arr_index : '[' expr ']' arr_index .  (26)

	.  reduce 26


42 terminals, 4 nonterminals
27 grammar rules, 42 states
